import Head from "next/head";
import Link from "next/link";
import {
  Container,
  SmallerSectionTitle,
  SectionContainer,
  EachLinck,
} from "../styles/GlobalComponents";
import { getApolloClient } from "../lib/apollo";
import { gql } from "@apollo/client";
import { clientTwo } from "../lib/apollo";
import { BlockRenderer } from "../components/BlockRenderer/BlockRenderer";
import styles from "../styles/Home.module.css";
import CenterSection from "../components/CenterSection/CenterSection";
import { EachLink } from "../styles/GlobalComponents";
import Image from "next/image";
import { cleanAndTransformBlocks } from "../utils/cleanAndTransformBlocks";
//import { cleanAndTransformBlocks } from "./../utils/cleanAndTransformBlocks";
import Avatar from "../public/AvatarMaker.png";
import MainMenu from "../components/MainMenu/MainMenu";
import { getAllPagesWithSlugs, getPageBySlug } from "../lib/api";
import { getPageStaticProps } from "../utils/getPageStaticProps";
import { Page } from "../components/Page/PageArea";
import  client  from "client";

// // export const getStaticProps = getPageStaticProps;
// // export async function getStaticPaths() {
// //   const pagesWithSlugs = await getAllPagesWithSlugs();
// //   return {
// //     paths: [...pagesWithSlugs.pages.edges, ...pagesWithSlugs.properties.edges].map(({ node }) => `/${node.slug}`) || [],
// //     //paths: pagesWithSlugs.edges?.map(({ node }) => `/${node.slug}`) || [],
// //     // paths: [...pagesWithSlugs.pages.edges, ...pagesWithSlugs.properties.edges]
// //     // .filter((page) => page.uri !== "/")
// //     // .map((page) => ({
// //       //   params: {
// //         //     slug: page.uri?.substring(1, page.uri.length - 1).split("/"),
// //         //   },
// //         // })),
// //         fallback: true,
// //       };
// //     }

// export const getStaticProps = getPageStaticProps;

// // export const getStaticPaths = async () => {
// //   const { data } = await clientTwo.query({
// //     query: gql`
// //       query AllPagesQuery {
// //         pages {
// //           nodes {
// //             uri
// //           }
// //         }
// //         properties {
// //           nodes {
// //             uri
// //           }
// //         }
// //       }
// //     `,
// //   });
// //   console.log("data", data)
// //   return {
// //     paths: [...data?.pages?.nodes, ...data?.properties?.nodes]
// //       .filter((page) => page.uri !== "/")
// //       .map((page) => ({
// //         params: {
// //           slug: page.uri.substring(1, page.uri.length - 1).split("/"),
// //         },
// //       })),
// //     fallback: "blocking",
// //   }
// // }



// export const getStaticPaths = async () => {
// try {
//   const { data } = await clientTwo.query({
//     query: gql`
//       query AllPagesQuery {
//         pages {
//           nodes {
//             uri
//           }
//         }
//         properties {
//           nodes {
//             uri
//           }
//         }
//       }
//     `,
//   });
//   console.log("data", data);
//   return {
//     paths: [...data?.pages?.nodes, ...data?.properties?.nodes]
//       .filter((page) => page.uri !== "/")
//       .map((page) => ({
//         params: {
//           slug: page.uri.substring(1, page.uri.length - 1).split("/"),
//         },
//       })),
//     fallback: "blocking",
//   }
// } catch (error) {
//   console.error("Error fetching data:", error);
// }
// }


// const response = await clientTwo.query({
//   query: gql`
//     query AllPagesQuery {
//       pages {
//         nodes {
//           uri
//         }
//       }
//       properties {
//         nodes {
//           uri
//         }
//       }
//     }
//   `,
// });
// console.log("response", response);
// //const { data } = response;
// //console.log("data", data);




// export default function Home({ mappedMenuItems, blocks, data }, props) {
//   console.log("pr", props);
//   console.log("data", data);

//   //const { pages, properties } =  getAllPagesWithSlugs();
//   //console.log("pagesWithSlugs.properties.edges",pages)
//   //console.log("pagesWithSlugs.pages.edges",properties)

//   // console.log("page", pages);
//   console.log("block", blocks);
//   return (
//     <>
//       <>
//         <Container>
//           <MainMenu mappedMenuItems={mappedMenuItems} />
//           <BlockRenderer blocks={blocks} />
//         </Container>
//       </>
//     </>
//   );
// }

{/* <Head>
  <title>Yara Brek</title>
  <meta name="description" content="Generated by create next app" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="/favicon.png" />
</Head> */}




// Import necessary modules and components

export const getStaticProps = getPageStaticProps;

export const getStaticPaths = async () => {
  try {
    const { data } = await clientTwo.query({
      query: gql`
        query AllPagesQuery {
          pages {
            nodes {
              uri
            }
          }
          properties {
            nodes {
              uri
            }
          }
        }
      `,
    });

    console.log("data", data);

    const paths = [...data?.pages?.nodes, ...data?.properties?.nodes]
      .filter((page) => page.uri !== "/")
      .map((page) => ({
        params: {
          slug: page.uri.substring(1, page.uri.length - 1).split("/"),
        },
      }));

    console.log("paths", paths);

    return {
      paths,
      fallback: "blocking",
    };
  } catch (error) {
    console.error("Error fetching data:", error);
    return {
      paths: [],
      fallback: "blocking",
    };
  }
};

// export default function Home({ mappedMenuItems, blocks, data }) {
//   console.log("data", data);
//  //console.log("mappedMenuItems", mappedMenuItems);
//   console.log("blocks", blocks);

//   return (
//     <>
//       <Container>
//         <MainMenu mappedMenuItems={mappedMenuItems} />
//         <BlockRenderer blocks={blocks} />
//       </Container>
//     </>
//   );
// }
export default function Home({ mappedMenuItems, blocks, data }) {
  console.log("data", data);
  console.log("blocks", blocks);

  // Check if data is available before rendering
  // if (!data) {
  //   return <div>Loading...</div>;
  // }

  return (
    <>
      <Container>
        <MainMenu mappedMenuItems={mappedMenuItems} />
        <BlockRenderer blocks={blocks} />
      </Container>
    </>
  );
}